<?php

namespace fmr\action;

use fmr\AjaxInvokeInterface;
use fmr\system\data\DatabaseObject;
use fmr\system\exception\AjaxException;
use fmr\util\StringUtil;
use Laminas\Diactoros\Response\JsonResponse;

class AjaxInvokeAction extends SecureAction
{

    public string $actionName = "";

    public $actionObject;

    public string $className = "";

    public bool $isDebugMode = false;

    protected mixed $response = ['code' => 200];

    public function __run()
    {
        try {
            return parent::__run();
        } catch (\Throwable $e) {
            throw $e;
        }
    }

    public function readParameters()
    {

        parent::readParameters(); // TODO: Change the autogenerated stub

        if ($_SERVER['REQUEST_METHOD'] == 'POST' && empty($_POST)) {
            $this->response = [
                'message' => 'This is a server API, you cannot acces it by navigating your browser to this url',
            ];
            return $this->sendResponse();
        }

        if (isset($_POST['actionName']))
            $this->actionName = StringUtil::trim($_POST['actionName']);
        if (isset($_POST['className']))
            $this->className = StringUtil::trim($_POST['className']);

        if (empty($this->className) || !class_exists($this->className)) {
            throw new AjaxException('Class \'' . $this->className . '\' not found');
        }
        return true;
    }

    public function execute()
    {
        parent::execute();

        if (!is_subclass_of($this->className, AjaxInvokeInterface::class))
            throw new AjaxException('Interface \'AjaxInvokeInterface\' not implemented');


        if (empty($this->actionName))
            throw new AjaxException('Parameter \'actionName\' is missing');

        $className = $this->className;

        if (!property_exists($className, 'allowInvoke') || !in_array($this->actionName, $className::$allowInvoke))
            throw new AjaxException('Class \'' . $className . '\' does not allow invoke action \'' . $this->actionName);

        try {
            $reflection = new \ReflectionMethod($className, $this->actionName);
        } catch (\ReflectionException $e) {
            throw new AjaxException($e->getMessage(), $e->getCode());
        }

        self::sendResponse();
    }

    protected function sendResponse()
    {
        $response = new JsonResponse($this->response);
        return $response;
    }

    public function getResponse()
    {
        return $this->response;
    }
}